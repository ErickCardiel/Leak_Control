#include <ESP8266WiFi.h>
#include <PubSubClient.h> // in order to work this program change MQTT_MAX_PACKET_SIZE from this header
#include <time.h>

const unsigned char private_der[] = {
0x30, 0x82, 0x04, 0xA2, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xC7, 0x57, 0x3C, 0xF4, 
0xB3, 0xAF, 0x6D, 0x00, 0xFD, 0x51, 0x93, 0x36, 0x84, 0xB5, 0x5C, 0x11, 0xFA, 0x1A, 0x54, 0x81, 
0xAC, 0xBA, 0x14, 0xF7, 0x64, 0x90, 0x61, 0xC4, 0x93, 0xD4, 0xF6, 0xE4, 0x35, 0x53, 0x21, 0xFB, 
0x98, 0x2E, 0x85, 0x17, 0x27, 0x73, 0x51, 0x8A, 0x01, 0x1D, 0x16, 0x75, 0xAE, 0x29, 0x59, 0xCB, 
0x0F, 0xBB, 0x8A, 0x62, 0x2D, 0x26, 0x7B, 0xF0, 0x62, 0x5B, 0xBA, 0x0D, 0xAA, 0x3D, 0x46, 0xAD, 
0xCE, 0x9B, 0xA5, 0xC8, 0x39, 0xE2, 0x6C, 0x29, 0x80, 0xFD, 0xF2, 0x20, 0xC7, 0x82, 0x61, 0x30, 
0xDA, 0x9F, 0xEA, 0xB2, 0xE8, 0x7C, 0xA0, 0x1F, 0x0B, 0xB5, 0xBA, 0xBB, 0xFE, 0x55, 0xC6, 0x02, 
0xDC, 0x3A, 0xE6, 0x52, 0xCC, 0x4B, 0xB9, 0xED, 0x42, 0xDC, 0x4C, 0x60, 0xDC, 0xC4, 0x45, 0x83, 
0xDE, 0xB6, 0xF0, 0xAA, 0xE6, 0xF1, 0x17, 0x6E, 0xA1, 0x3D, 0x06, 0xC0, 0xA2, 0xEE, 0x18, 0x35, 
0xFE, 0x6F, 0xE8, 0x2F, 0x0C, 0xE2, 0xAF, 0xFB, 0x15, 0x7B, 0x76, 0x63, 0xDE, 0xA2, 0xA3, 0x70, 
0x01, 0x94, 0x7B, 0x01, 0x27, 0x1A, 0x60, 0xF3, 0x93, 0xCF, 0x22, 0x8A, 0xBF, 0x3F, 0xC5, 0x79, 
0x3A, 0x04, 0xEA, 0x84, 0xAD, 0x6E, 0x70, 0x78, 0xB1, 0x6A, 0x2A, 0x63, 0x86, 0xF0, 0xDE, 0x23, 
0xB6, 0x6B, 0x77, 0xBB, 0x8B, 0x8A, 0x9B, 0xBB, 0x39, 0xFF, 0xF8, 0x07, 0xC4, 0x2C, 0x42, 0x26, 
0x48, 0xE6, 0x36, 0xBD, 0x41, 0xB4, 0xD1, 0x3E, 0xF2, 0x81, 0x8E, 0x4D, 0x88, 0x8B, 0x6A, 0x1D, 
0xA0, 0x86, 0x3A, 0x8C, 0xDA, 0xD4, 0x4B, 0x72, 0x17, 0x38, 0xC1, 0xAC, 0xA5, 0xEB, 0xC4, 0x0E, 
0x3E, 0xF1, 0x6C, 0x92, 0xC8, 0x64, 0x3B, 0x0C, 0xD9, 0x64, 0x23, 0x61, 0xB5, 0xC2, 0xF1, 0xE7, 
0x08, 0x79, 0x92, 0x92, 0x2D, 0x27, 0x53, 0xA3, 0x0F, 0x24, 0x17, 0x8D, 0x02, 0x03, 0x01, 0x00, 
0x01, 0x02, 0x82, 0x01, 0x00, 0x37, 0x04, 0x74, 0xE6, 0x74, 0xD1, 0x6E, 0x1C, 0x5F, 0xCE, 0x2B, 
0xFB, 0x58, 0x15, 0x56, 0x1C, 0x00, 0x13, 0x54, 0x4F, 0x96, 0x04, 0xA5, 0xD4, 0xC2, 0x04, 0xB7, 
0x77, 0x31, 0xF6, 0x0D, 0x4E, 0x5F, 0x09, 0x5A, 0xCF, 0xBD, 0xE8, 0xD9, 0x02, 0xD2, 0xF8, 0x99, 
0x00, 0xA5, 0xDE, 0x09, 0x5C, 0xE1, 0x7C, 0xB8, 0x33, 0xBB, 0x5B, 0xDF, 0x8D, 0xC9, 0x38, 0x5D, 
0xEC, 0xB2, 0xB8, 0xEE, 0x58, 0xE7, 0x2B, 0x92, 0x5E, 0x56, 0x2F, 0xCF, 0x49, 0xBB, 0xF0, 0x2A, 
0x3A, 0x2A, 0x47, 0xEC, 0x93, 0xEF, 0x7C, 0xA4, 0xA6, 0x7F, 0x30, 0xB3, 0xEE, 0x3D, 0x0C, 0x68, 
0x85, 0x29, 0x0E, 0x37, 0x43, 0xBB, 0xA6, 0xA0, 0xC8, 0x19, 0x50, 0x88, 0x51, 0x41, 0xE1, 0x84, 
0xA7, 0x5F, 0x54, 0xBE, 0x1F, 0xDD, 0xCE, 0xAE, 0x00, 0xFF, 0x6F, 0x2E, 0x6D, 0x7C, 0xDF, 0xFD, 
0xBF, 0xA2, 0xF0, 0xDC, 0xF3, 0xC1, 0x4F, 0x43, 0x9E, 0x1A, 0xF1, 0x7C, 0x4B, 0x08, 0x73, 0xDC, 
0x7A, 0x87, 0x98, 0x48, 0x21, 0x12, 0x41, 0xD1, 0xAC, 0xD5, 0x51, 0x5C, 0xBC, 0xD2, 0x1E, 0xD1, 
0x33, 0xAB, 0xC9, 0x8C, 0x79, 0x12, 0xB2, 0x95, 0x17, 0xEC, 0x23, 0xD2, 0x2B, 0xFC, 0xE5, 0x17, 
0x54, 0xF0, 0x30, 0xF3, 0xB8, 0x0A, 0x88, 0x46, 0x73, 0xE5, 0x27, 0xF2, 0x42, 0x2D, 0x69, 0xC9, 
0x23, 0x1E, 0xF8, 0x5E, 0x83, 0xE4, 0x84, 0x3F, 0x7B, 0xAD, 0x17, 0x27, 0xA9, 0x01, 0x23, 0x8A, 
0x89, 0xE7, 0xDF, 0xC1, 0xEA, 0xFA, 0x5D, 0xF0, 0xEA, 0x42, 0xCE, 0x7C, 0x89, 0x02, 0x35, 0xFD, 
0xB2, 0xEA, 0xB0, 0x8D, 0x00, 0x0A, 0x6B, 0x7F, 0x86, 0x46, 0x01, 0xBA, 0xFC, 0xD5, 0x4E, 0x70, 
0x64, 0x8E, 0xBE, 0xD4, 0xC7, 0xAC, 0x39, 0x90, 0x22, 0xE4, 0x96, 0xD6, 0xAE, 0x5D, 0xD1, 0xC0, 
0x82, 0xBF, 0xFA, 0x41, 0x01, 0x02, 0x81, 0x81, 0x00, 0xE4, 0xAD, 0x21, 0xE5, 0x75, 0xCC, 0x8B, 
0xEE, 0xE0, 0xAF, 0x29, 0x59, 0xD9, 0xAC, 0x6D, 0x76, 0x3D, 0x6D, 0xBD, 0x3A, 0xB9, 0x4D, 0xFE, 
0x9B, 0xA0, 0x95, 0xEA, 0x26, 0x6B, 0x22, 0x3A, 0x13, 0x92, 0xD2, 0x3F, 0xD1, 0x8F, 0xB3, 0xC6, 
0xE5, 0xF2, 0x9A, 0xF1, 0xEC, 0x15, 0xE5, 0xCF, 0xEB, 0x20, 0xEB, 0x4F, 0x36, 0xB6, 0xFE, 0x64, 
0x80, 0x92, 0x0F, 0x75, 0x9F, 0x37, 0xD9, 0xBD, 0x6A, 0x22, 0x24, 0xFB, 0x03, 0x54, 0xC3, 0x0A, 
0x40, 0xD5, 0xF9, 0x1E, 0xA7, 0xA2, 0x47, 0xF0, 0x1B, 0xC2, 0x8B, 0xFF, 0xA9, 0x5A, 0x66, 0x9C, 
0xF6, 0x7E, 0x8E, 0xCF, 0x90, 0x4E, 0x4B, 0xBF, 0x7A, 0xF1, 0xCF, 0x72, 0x25, 0x6E, 0x40, 0xA4, 
0x5F, 0x16, 0x93, 0x20, 0x68, 0x4F, 0x85, 0xFE, 0x70, 0x66, 0xB5, 0xA5, 0x20, 0xCB, 0x06, 0x26, 
0x2D, 0xA0, 0x04, 0x6A, 0x3F, 0xD5, 0xDC, 0xE6, 0x05, 0x02, 0x81, 0x81, 0x00, 0xDF, 0x28, 0xC6, 
0x92, 0x39, 0x63, 0x0F, 0x4E, 0xB6, 0x1F, 0xC1, 0x4D, 0x80, 0xD5, 0xF2, 0x09, 0xAC, 0xF0, 0xE8, 
0xB7, 0xD8, 0x18, 0x7C, 0xE0, 0x0C, 0xDC, 0xF5, 0x59, 0xD3, 0x74, 0xF8, 0xBB, 0x92, 0x9E, 0x19, 
0x26, 0x92, 0x7C, 0xA4, 0x21, 0xDB, 0x4E, 0x65, 0x62, 0x7E, 0xAC, 0xB8, 0x17, 0xBA, 0xD2, 0x7A, 
0xF0, 0x74, 0xE6, 0x01, 0xC3, 0x87, 0x11, 0x87, 0xFA, 0x9B, 0x10, 0xDD, 0x7C, 0x30, 0x59, 0x6C, 
0x0C, 0x78, 0x74, 0xDA, 0xBC, 0x61, 0x97, 0x86, 0xEC, 0x32, 0x89, 0x6A, 0x69, 0x88, 0x47, 0x0A, 
0x52, 0xEE, 0xEE, 0x25, 0x59, 0xB0, 0xA3, 0x3C, 0x1F, 0xB6, 0x88, 0xCF, 0x3C, 0x20, 0xDE, 0x78, 
0xD5, 0x60, 0x25, 0x46, 0x94, 0x9C, 0x42, 0x05, 0x6D, 0x69, 0x19, 0x15, 0x90, 0xB6, 0xDC, 0x70, 
0x43, 0x83, 0x2C, 0x28, 0xB9, 0x67, 0xE2, 0x48, 0xC5, 0x9B, 0xD3, 0x59, 0xE9, 0x02, 0x81, 0x80, 
0x0E, 0x5C, 0xA1, 0x48, 0x5C, 0x01, 0xA0, 0xB8, 0x3B, 0xFC, 0x44, 0x48, 0x94, 0x57, 0x33, 0xF8, 
0xBD, 0x1A, 0xEB, 0x4B, 0x88, 0xDF, 0xD1, 0x21, 0xCD, 0x10, 0x1D, 0x48, 0x94, 0x69, 0xED, 0xE3, 
0xD4, 0xD0, 0xC7, 0x99, 0x4D, 0xC1, 0x28, 0xB8, 0xC0, 0x67, 0xE2, 0xD1, 0xC4, 0xFE, 0x4D, 0xF4, 
0xA2, 0x78, 0xA4, 0xDC, 0xF6, 0xD9, 0x3B, 0x4E, 0xA7, 0xDD, 0xB8, 0xB1, 0x6B, 0x3C, 0x8D, 0x9C, 
0xE0, 0xD0, 0x19, 0xC3, 0xB7, 0xCB, 0x18, 0x15, 0xC2, 0x5A, 0x87, 0x06, 0x58, 0x36, 0xD4, 0x69, 
0xA9, 0xEA, 0x49, 0x00, 0x45, 0xE1, 0x33, 0xF2, 0x77, 0x38, 0x58, 0xE8, 0xE3, 0x41, 0xF6, 0xA0, 
0xAE, 0x17, 0x2D, 0x40, 0x14, 0x90, 0x92, 0xC2, 0x36, 0x14, 0xBF, 0x70, 0x4D, 0xAE, 0x48, 0xB0, 
0x9E, 0x82, 0xC2, 0x00, 0x31, 0x40, 0x0D, 0x9D, 0xC7, 0xF2, 0xFF, 0x09, 0x4B, 0x51, 0x38, 0x51, 
0x02, 0x81, 0x80, 0x79, 0x6E, 0xA8, 0xCF, 0x3C, 0xE7, 0x08, 0x97, 0x5E, 0x47, 0x5D, 0x5A, 0x9D, 
0x36, 0xCE, 0x64, 0x31, 0x75, 0x4E, 0x4D, 0x6C, 0x0B, 0xB7, 0x37, 0xFC, 0x07, 0xE8, 0x82, 0x9E, 
0xAC, 0x52, 0x05, 0x4F, 0xBD, 0x34, 0x16, 0x67, 0x33, 0xE7, 0xE4, 0x7C, 0x7F, 0xE6, 0x6F, 0x78, 
0x5A, 0xE8, 0x3A, 0x11, 0x71, 0x23, 0x70, 0xE1, 0x4B, 0x9F, 0xBE, 0x14, 0x2B, 0x98, 0x00, 0xE8, 
0x8C, 0x7E, 0xD9, 0x6B, 0x3D, 0xDD, 0xAB, 0xD3, 0x88, 0x52, 0xD6, 0x9B, 0x8C, 0x66, 0xE0, 0xF4, 
0x87, 0x0E, 0x1E, 0xAB, 0x07, 0x6D, 0x38, 0xBF, 0xC7, 0x5B, 0x0F, 0xB9, 0x2C, 0xBA, 0x34, 0xCF, 
0x91, 0x16, 0xA3, 0xB3, 0x87, 0x1B, 0xDD, 0x90, 0x59, 0xF8, 0x54, 0x39, 0xCB, 0x3B, 0x44, 0xD4, 
0x21, 0xD0, 0x38, 0x55, 0x29, 0x12, 0xF5, 0xC9, 0xD5, 0x27, 0xBB, 0xEC, 0x29, 0x98, 0x4B, 0xDF, 
0x85, 0x5C, 0xB1, 0x02, 0x81, 0x80, 0x06, 0x4D, 0xA4, 0x3D, 0x4C, 0x24, 0xFD, 0x58, 0xF1, 0x4D, 
0x5E, 0xCE, 0x6A, 0x58, 0xED, 0x97, 0x5F, 0xAD, 0xA7, 0x29, 0x0A, 0xAD, 0xDF, 0x8D, 0xCE, 0x9B, 
0xEF, 0x7C, 0xC3, 0xAC, 0x40, 0xAE, 0x67, 0x6A, 0x7F, 0xFE, 0xED, 0x1B, 0xCB, 0x7E, 0xD6, 0xC8, 
0xA5, 0x2B, 0x2D, 0x23, 0x40, 0x3F, 0xA2, 0x72, 0x98, 0x3A, 0x44, 0x31, 0xF8, 0xAD, 0x3C, 0x8B, 
0xA1, 0xC1, 0xFE, 0x44, 0x79, 0x9D, 0x16, 0x78, 0x39, 0x84, 0xDC, 0x39, 0xED, 0xE5, 0xDF, 0x80, 
0xF4, 0x26, 0x4F, 0x2F, 0x94, 0x11, 0x57, 0xE8, 0x04, 0xE7, 0x5F, 0x06, 0xDC, 0x00, 0x5A, 0x2D, 
0x00, 0x37, 0x91, 0x95, 0x89, 0xBA, 0x58, 0xD0, 0xC2, 0x34, 0x89, 0xB3, 0x95, 0x87, 0x1D, 0x9E, 
0x4F, 0x02, 0x66, 0x81, 0x7E, 0x35, 0xA3, 0xBF, 0x4F, 0xCC, 0x28, 0xA7, 0xC4, 0x85, 0xB0, 0x35, 
0x04, 0x76, 0xBC, 0x93, 0x67, 0x9A
};

const unsigned int private_der_len = 1191;

const unsigned char cert_der[] = {
0x30, 0x82, 0x03, 0x59, 0x30, 0x82, 0x02, 0x41, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x57, 
0xE8, 0xD7, 0x24, 0x15, 0x71, 0x0D, 0x35, 0x99, 0x60, 0x6F, 0x32, 0x0E, 0xCA, 0x86, 0x83, 0xE1, 
0x25, 0x61, 0xA3, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 
0x05, 0x00, 0x30, 0x4D, 0x31, 0x4B, 0x30, 0x49, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x42, 0x41, 
0x6D, 0x61, 0x7A, 0x6F, 0x6E, 0x20, 0x57, 0x65, 0x62, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 
0x65, 0x73, 0x20, 0x4F, 0x3D, 0x41, 0x6D, 0x61, 0x7A, 0x6F, 0x6E, 0x2E, 0x63, 0x6F, 0x6D, 0x20, 
0x49, 0x6E, 0x63, 0x2E, 0x20, 0x4C, 0x3D, 0x53, 0x65, 0x61, 0x74, 0x74, 0x6C, 0x65, 0x20, 0x53, 
0x54, 0x3D, 0x57, 0x61, 0x73, 0x68, 0x69, 0x6E, 0x67, 0x74, 0x6F, 0x6E, 0x20, 0x43, 0x3D, 0x55, 
0x53, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x38, 0x31, 0x31, 0x31, 0x32, 0x30, 0x31, 0x35, 0x35, 0x34, 
0x30, 0x5A, 0x17, 0x0D, 0x34, 0x39, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 
0x5A, 0x30, 0x1E, 0x31, 0x1C, 0x30, 0x1A, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x13, 0x41, 0x57, 
0x53, 0x20, 0x49, 0x6F, 0x54, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 
0x65, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 
0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 
0x01, 0x00, 0xC7, 0x57, 0x3C, 0xF4, 0xB3, 0xAF, 0x6D, 0x00, 0xFD, 0x51, 0x93, 0x36, 0x84, 0xB5, 
0x5C, 0x11, 0xFA, 0x1A, 0x54, 0x81, 0xAC, 0xBA, 0x14, 0xF7, 0x64, 0x90, 0x61, 0xC4, 0x93, 0xD4, 
0xF6, 0xE4, 0x35, 0x53, 0x21, 0xFB, 0x98, 0x2E, 0x85, 0x17, 0x27, 0x73, 0x51, 0x8A, 0x01, 0x1D, 
0x16, 0x75, 0xAE, 0x29, 0x59, 0xCB, 0x0F, 0xBB, 0x8A, 0x62, 0x2D, 0x26, 0x7B, 0xF0, 0x62, 0x5B, 
0xBA, 0x0D, 0xAA, 0x3D, 0x46, 0xAD, 0xCE, 0x9B, 0xA5, 0xC8, 0x39, 0xE2, 0x6C, 0x29, 0x80, 0xFD, 
0xF2, 0x20, 0xC7, 0x82, 0x61, 0x30, 0xDA, 0x9F, 0xEA, 0xB2, 0xE8, 0x7C, 0xA0, 0x1F, 0x0B, 0xB5, 
0xBA, 0xBB, 0xFE, 0x55, 0xC6, 0x02, 0xDC, 0x3A, 0xE6, 0x52, 0xCC, 0x4B, 0xB9, 0xED, 0x42, 0xDC, 
0x4C, 0x60, 0xDC, 0xC4, 0x45, 0x83, 0xDE, 0xB6, 0xF0, 0xAA, 0xE6, 0xF1, 0x17, 0x6E, 0xA1, 0x3D, 
0x06, 0xC0, 0xA2, 0xEE, 0x18, 0x35, 0xFE, 0x6F, 0xE8, 0x2F, 0x0C, 0xE2, 0xAF, 0xFB, 0x15, 0x7B, 
0x76, 0x63, 0xDE, 0xA2, 0xA3, 0x70, 0x01, 0x94, 0x7B, 0x01, 0x27, 0x1A, 0x60, 0xF3, 0x93, 0xCF, 
0x22, 0x8A, 0xBF, 0x3F, 0xC5, 0x79, 0x3A, 0x04, 0xEA, 0x84, 0xAD, 0x6E, 0x70, 0x78, 0xB1, 0x6A, 
0x2A, 0x63, 0x86, 0xF0, 0xDE, 0x23, 0xB6, 0x6B, 0x77, 0xBB, 0x8B, 0x8A, 0x9B, 0xBB, 0x39, 0xFF, 
0xF8, 0x07, 0xC4, 0x2C, 0x42, 0x26, 0x48, 0xE6, 0x36, 0xBD, 0x41, 0xB4, 0xD1, 0x3E, 0xF2, 0x81, 
0x8E, 0x4D, 0x88, 0x8B, 0x6A, 0x1D, 0xA0, 0x86, 0x3A, 0x8C, 0xDA, 0xD4, 0x4B, 0x72, 0x17, 0x38, 
0xC1, 0xAC, 0xA5, 0xEB, 0xC4, 0x0E, 0x3E, 0xF1, 0x6C, 0x92, 0xC8, 0x64, 0x3B, 0x0C, 0xD9, 0x64, 
0x23, 0x61, 0xB5, 0xC2, 0xF1, 0xE7, 0x08, 0x79, 0x92, 0x92, 0x2D, 0x27, 0x53, 0xA3, 0x0F, 0x24, 
0x17, 0x8D, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x60, 0x30, 0x5E, 0x30, 0x1F, 0x06, 0x03, 0x55, 
0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xD8, 0x8B, 0x24, 0x16, 0x20, 0xF1, 0x85, 0x29, 
0x03, 0xDF, 0x07, 0x3F, 0xF7, 0xD8, 0x89, 0xC5, 0xEF, 0x84, 0x22, 0x85, 0x30, 0x1D, 0x06, 0x03, 
0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0x30, 0x59, 0x13, 0xA7, 0x6C, 0x61, 0x07, 0x23, 0x3A, 
0x74, 0x3D, 0xB3, 0x38, 0xEB, 0x72, 0x9B, 0xC2, 0xCC, 0x4B, 0xB9, 0x30, 0x0C, 0x06, 0x03, 0x55, 
0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x02, 0x30, 0x00, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 
0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x82, 0xF3, 0x29, 
0x2D, 0x84, 0x9C, 0x40, 0xB4, 0x07, 0x31, 0x5F, 0x76, 0xA5, 0x8A, 0x19, 0x60, 0xDC, 0x26, 0x15, 
0x3D, 0xBC, 0xEC, 0x74, 0xD1, 0xB1, 0xA0, 0xD9, 0x80, 0x68, 0x04, 0xC7, 0x63, 0x83, 0x54, 0xA1, 
0x13, 0x2B, 0x74, 0x9F, 0x9F, 0x92, 0xDB, 0xD1, 0xF0, 0x9F, 0x81, 0x1D, 0x20, 0x2E, 0x5D, 0x8B, 
0xEB, 0x47, 0x64, 0x78, 0xED, 0xBC, 0xD2, 0xD9, 0xE6, 0x97, 0x47, 0xC6, 0x33, 0xDE, 0x33, 0xDD, 
0x25, 0x97, 0xE4, 0x98, 0xD7, 0x82, 0xC2, 0xFC, 0xA3, 0x4D, 0x73, 0xC8, 0xB7, 0x75, 0x3A, 0x0F, 
0xEF, 0x1B, 0xA6, 0x37, 0xFC, 0x14, 0xBD, 0x35, 0x12, 0x60, 0x6B, 0xA1, 0x05, 0x07, 0x04, 0xD1, 
0x1A, 0xAB, 0xA6, 0x85, 0x2B, 0xE3, 0x85, 0xAC, 0xC4, 0xFE, 0x5A, 0xCC, 0x49, 0x65, 0x1A, 0x88, 
0x07, 0xC7, 0x40, 0xCA, 0x88, 0x6E, 0x6B, 0xFA, 0x25, 0x0F, 0x72, 0x60, 0xE6, 0xBE, 0x70, 0x0C, 
0x97, 0xD8, 0x18, 0xD3, 0xDD, 0x1F, 0xD6, 0x75, 0x65, 0x71, 0x7E, 0x0F, 0xFD, 0x60, 0xAF, 0xA1, 
0x01, 0xA7, 0xCA, 0xCB, 0x80, 0x57, 0xB0, 0x44, 0x8A, 0xBD, 0x8D, 0xAA, 0x06, 0xCF, 0xEB, 0x5F, 
0x5D, 0x97, 0xAA, 0x39, 0xFB, 0x92, 0xF4, 0x9F, 0xFF, 0x87, 0x2D, 0x79, 0x75, 0x4F, 0x12, 0xD0, 
0x91, 0xA3, 0x71, 0x2E, 0x78, 0xF2, 0x89, 0xC6, 0xFF, 0xF9, 0xD0, 0xB9, 0xFD, 0x21, 0xED, 0x83, 
0x73, 0x10, 0xD7, 0xAD, 0xEE, 0x52, 0x9E, 0xD0, 0xB3, 0x40, 0x13, 0x94, 0x54, 0x68, 0x1A, 0x3E, 
0xE0, 0x49, 0xA2, 0x81, 0x84, 0x7F, 0x84, 0x04, 0x7A, 0x65, 0x03, 0x64, 0xE4, 0x1E, 0x13, 0xAE, 
0x6B, 0x32, 0xB8, 0xAD, 0xD2, 0xE5, 0x54, 0x84, 0xA3, 0x1F, 0x5C, 0xD1, 0xB0, 0x5B, 0x22, 0x6D, 
0x6F, 0xD2, 0x1A, 0xAA, 0x2C, 0x27, 0xC7, 0x43, 0x51, 0x90, 0x73, 0x43, 0x1D
};

const unsigned int cert_der_len = 862;

const char* ssid = "GLS";               //Izzinet4872       STR              ErickPhone       Alberto-WiFi
const char* password = "icicicic";      //50217248          LABRTS2011-1     gbw1rghxroxyy    alberto1269
const char* mqtt_server = "xxxxxxxxxxxxxx-xxx.iot.xx-xxxx-x.amazonaws.com";   // aws host
const char* endPointPost = "$aws/things/xxxx/shadow/update";    // xxxx = your "Thing" name     
const char* suscribeTopic = "$aws/things/xxxx/pipeState";       // xxxx = your "Thing" name

WiFiClientSecure wifiClient;
PubSubClient mqttClient(wifiClient);

unsigned char data[1000];
char shadowAPI[200];
const int acceptanceRange = 0;

char dataFromSerial[10];
char jsonArray[300];

unsigned long time1 = 0;
unsigned long time2 = 0;
unsigned int cntLastPulses = 0;
char possibleLeak = '0';    
char hourArrayChar[2], minArrayChar[2];

int gpio_PWMA;
int gpio_AIN2;
int gpio_AIN1;
int gpio_STBY;

int longArray = 0;
int timezone = 7 * 3600;
int dst = 0;

void setup_wifiClient() 
{
  wifiClient.setCertificate(cert_der, cert_der_len);
  wifiClient.setPrivateKey(private_der, private_der_len);
}

void callback(char* topic, byte* payload, unsigned int length) 
{
  Serial.print("Topic [");
  Serial.print(topic);
  Serial.println("]");

  String payloadString = String((char *)payload);
  
  Serial.print("Payload [");
  Serial.print(payloadString);
  Serial.println("]");

  if(payloadString.indexOf("\"closePipe\" : 1") >= 0)
  {
    Serial.println("Closing valve...");
    mqttClient.unsubscribe(suscribeTopic);
    mqttClient.publish(suscribeTopic,"{\"state\":{\"reported\":{\"closePipe\" : 0}}}");
    mqttClient.subscribe(suscribeTopic);
    valve_close();
  }
  else
  {
    Serial.print("\nOpen valve...");
    valve_open();
  } 
}

void reconnect() {
  while (!mqttClient.connected()) 
  {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    
    if (mqttClient.connect(clientId.c_str())) 
    {
      Serial.println("connected");
      mqttClient.subscribe(suscribeTopic);
    } 
    else 
    {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void setup_wifi() 
{
  Serial.print("Connecting to ");
  Serial.print(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
    Serial.print(".");
  }
  Serial.print("\n¡WiFi connected!\nIP address:");
  Serial.println(WiFi.localIP());
}

void setup_mqttClient() 
{
  mqttClient.setServer(mqtt_server, 8883);
  mqttClient.setCallback(callback); 
  mqttClient.subscribe(suscribeTopic);
}

void gpio_setup()
{
  gpio_PWMA=5;    //  ESP8266=5 | ATMEGA2560=5
  gpio_AIN2=4;    //  ESP8266=4 | ATMEGA2560=4
  gpio_AIN1=0;    //  ESP8266=0 | ATMEGA2560=3
  gpio_STBY=2;    //  ESP8266=2 | ATMEGA2560=2
  pinMode(gpio_PWMA,OUTPUT); 
  pinMode(gpio_AIN2,OUTPUT); 
  pinMode(gpio_AIN1,OUTPUT); 
  pinMode(gpio_STBY,OUTPUT); 
  digitalWrite(gpio_PWMA, HIGH);  //PWM
}

void valve_close()
{
  digitalWrite(gpio_AIN1, LOW);   //IN1  
  digitalWrite(gpio_AIN2, HIGH);  //IN2
  digitalWrite(gpio_STBY, HIGH);  //STBY
  delay(50);
  digitalWrite(gpio_STBY, LOW);   //STBY                                      
}

void valve_open()
{
  digitalWrite(gpio_AIN1, HIGH);  //IN1
  digitalWrite(gpio_AIN2, LOW);   //IN2 
  digitalWrite(gpio_STBY, HIGH);  //STBY
  delay(50);
  digitalWrite(gpio_STBY, LOW);   //STBY                      
}

void setup() 
{
  Serial.begin(9600);
  setup_wifi();
  setup_time();
  setup_wifiClient();
  setup_mqttClient();
  gpio_setup();
  time1 = millis();   
}


void setup_time()
{
  configTime(timezone,dst,"pool.ntp.org","time.nist.gov");
  Serial.print("\nWaiting for internet time...");
  while(!time(nullptr))
  {
    Serial.print(".");
    delay(1000);  
  }
  Serial.println("Time response .... OK!");
}


void loop() 
{
  time2 = millis();
  
  if (!mqttClient.connected())  
    reconnect();
  
  if(time2 > (time1 + 20000)) // 20 secs elapsed?
  {  
    if(mqttClient.connected())
      mqttClient.loop();
    
    Serial.print("20 Secs!");
    if(cntLastPulses != 0)
    {   
      longArray = 0;
      for(int i = 0; data[i] != '\0' ; i++)
        longArray++;
              
      data[longArray] = lowByte(cntLastPulses);
      possibleLeak = leakTest();
      cntLastPulses = 0;
    }
    time1 = millis();
    if(mqttClient.connected())
      mqttClient.loop();
  }

  Serial.readBytes(dataFromSerial,10);
  if(!dataFromSerial[0])    
    Serial.print(".");
    
  else
  {
    if(mqttClient.connected())    
      mqttClient.loop();
    
    time_t now = time(nullptr);
    struct tm* p_tm = localtime(&now);
    String jsonString;
 
    Serial.println("Posting new message");
    
    jsonString.concat("{\"state\":{\"reported\":{\"pipe\":{\"totalm3water\":");
    jsonString.concat(dataFromSerial);
    jsonString.concat(", \"possibleLeak\":");
    jsonString.concat(possibleLeak);    
    jsonString.concat("},\"newMedition\":\"");
    jsonString.concat(String(p_tm->tm_hour));       // p_tm->tm_hour/tm_min : are integer
    jsonString.concat("-");
    jsonString.concat(String(p_tm->tm_min));
    jsonString.concat("\"}}}");  
    jsonString.toCharArray(jsonArray, 300);
    Serial.println(jsonString);
    mqttClient.publish(endPointPost,jsonArray);
    
    /* Clear arrays*/
    memset(dataFromSerial, '\0', sizeof(dataFromSerial));
    memset(hourArrayChar, '\0', sizeof(hourArrayChar));
    memset(minArrayChar, '\0', sizeof(minArrayChar));
    
    if(possibleLeak == '1')
      possibleLeak = '0';
  
    cntLastPulses++;
  } 
  
    if(mqttClient.connected())
      mqttClient.loop();
}

char leakTest()
{
  int average = 0, cnt = 0;
  Serial.println("Content in array [data]: ");
  for(int i = 0; data[i]!='\0' ; i++)
  {
    average += data[i];
    Serial.print('[');
    Serial.print(data[i]);
    Serial.println(']');
    cnt++;
  }
  Serial.print("Array [data] long:");
  Serial.println(cnt);
  average /= cnt;
  average += acceptanceRange;
  Serial.print("Average value:");
  Serial.println(average);
  Serial.print("Last number of pulses:");
  Serial.println(cntLastPulses);
  
  return ((cntLastPulses > average)?'1':'0');
}



/*        Json Format

{
    "state": 
    {
            "pipe" : 
            {
              "totalm3water": x,
              "possibleLeak": x,    
              "closePipe":x         
            },
            "newMedition":"xx-xx"
    }
}


*/